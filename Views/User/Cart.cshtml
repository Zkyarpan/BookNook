@model IEnumerable<BookHive.Models.CartWithDiscountViewModel>

@{
    ViewData["Title"] = "My Cart";
}

<div class="container mx-auto px-4 py-6">
    <h2 class="text-2xl font-bold text-center text-amber-900 mb-6">My Cart</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 text-green-700 p-2 rounded mb-4 text-center text-sm">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 text-red-700 p-2 rounded mb-4 text-center text-sm">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (!Model.Any())
    {
        <p class="text-center text-gray-600 text-sm">Your cart is empty.</p>
    }
    else
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4" id="cart-items">
            @foreach (var item in Model)
            {
                var cartItem = item.CartItem;
                var book = cartItem.Book;
                <div class="bg-amber-50 rounded-lg shadow-md p-2 flex flex-col" data-cart-item="@book.Id">
                    @if (item.OnSaleFlag && item.IsDiscountActive)
                    {
                        <span class="absolute top-2 right-2 bg-red-600 text-white text-xs font-medium px-2 py-1 rounded">On Sale</span>
                    }
                    @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                    {
                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">
                            <img src="@book.CoverImageUrl" alt="@book.Title" class="w-full h-36 object-cover rounded mb-2" />
                        </a>
                    }
                    else
                    {
                        <div class="w-full h-36 bg-gray-200 flex items-center justify-center rounded mb-2">
                            <span class="text-sm">No Image</span>
                        </div>
                    }
                    <h3 class="text-base font-semibold text-amber-800 mb-1">
                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id">@book.Title</a>
                    </h3>
                    <p class="text-gray-600 text-sm mb-1">by @book.Author</p>
                    <p class="text-gray-600 text-sm mb-1">
                        @if (item.IsDiscountActive)
                        {
                            <span class="line-through text-gray-500">$@book.Price</span>
                            <span class="text-green-600 font-medium ml-2">$@item.DiscountedPrice.ToString("F2")</span>
                        }
                        else
                        {
                            <span>Price: $@book.Price</span>
                        }
                    </p>
                    <p class="text-gray-600 text-sm mb-1" data-stock="@book.Id">In Stock: @book.Quantity</p>
                    <p class="text-gray-600 text-sm mb-2" data-total-price="@book.Id">Total: $@((item.IsDiscountActive ? item.DiscountedPrice : book.Price) * cartItem.Quantity)</p>
                    <div class="flex items-center mb-2">
                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity - 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" class="bg-gray-300 text-gray-700 font-medium text-xs py-1 px-2 rounded-l hover:bg-gray-400 @(cartItem.Quantity <= 1 ? "opacity-50 cursor-not-allowed" : "")" @(cartItem.Quantity <= 1 ? "disabled" : "")>-</button>
                        <input type="number" id="quantity-@book.Id" value="@cartItem.Quantity" min="1" class="w-12 p-1 text-center border border-gray-300 text-sm" onchange="updateQuantity(@book.Id, this.value, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" />
                        <button onclick="updateQuantity(@book.Id, @cartItem.Quantity + 1, @(item.IsDiscountActive ? item.DiscountedPrice : book.Price))" class="bg-gray-300 text-gray-700 font-medium text-xs py-1 px-2 rounded-r hover:bg-gray-400" id="increment-@book.Id">+</button>
                    </div>
                    <form asp-action="RemoveFromCart" method="post">
                        <input type="hidden" name="bookId" value="@book.Id" />
                        <button type="submit" class="w-full bg-red-600 text-white font-medium text-xs py-1 rounded hover:bg-red-700">Remove</button>
                    </form>
                </div>
            }
        </div>
        <div class="text-center mt-4">
            <p class="text-gray-700 mb-2" id="total-cart-price">Total Price: $@Model.Sum(c => (c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price) * c.CartItem.Quantity)</p>
            <a asp-action="Checkout" asp-controller="Cart" class="inline-block bg-amber-600 text-white font-medium text-sm py-1.5 px-3 rounded hover:bg-amber-700">Proceed to Checkout</a>
        </div>
    }
</div>

@section Scripts {
    <script>
        let cartItems = @Html.Raw(Json.Serialize(Model.Select(c => new { bookId = c.CartItem.Book.Id, quantity = c.CartItem.Quantity, price = c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price, stock = c.CartItem.Book.Quantity })));

        async function fetchStock(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetBookStock", "Books")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch stock');
                }
                const data = await response.json();
                return data.stock;
            } catch (error) {
                console.error('Error fetching stock:', error);
                let item = cartItems.find(i => i.bookId === bookId);
                return item ? item.stock : 0;
            }
        }

        async function fetchCartItem(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetCartItem", "Cart")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch cart item');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching cart item:', error);
                return null;
            }
        }

        async function updateQuantity(bookId, newQuantity, price) {
            // Fetch the latest cart item data
            const cartItemData = await fetchCartItem(bookId);
            if (!cartItemData || !cartItemData.exists) {
                alert('Book not in your cart.');
                // Remove the item from the UI
                const itemElement = document.querySelector(`[data-cart-item="${bookId}"]`);
                if (itemElement) {
                    itemElement.remove();
                }
                // Update total cart price
                cartItems = cartItems.filter(item => item.bookId !== bookId);
                let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                return;
            }

            // Fetch the latest stock
            const maxQuantity = await fetchStock(bookId);

            // Update stock display
            document.querySelector(`[data-stock="${bookId}"]`).textContent = `In Stock: ${maxQuantity}`;

            // Update cart items array with new stock
            let item = cartItems.find(i => i.bookId === bookId);
            if (item) {
                item.stock = maxQuantity;
            }

            // Validate quantity
            if (newQuantity < 1) {
                newQuantity = 1;
            }
            if (newQuantity > maxQuantity) {
                newQuantity = maxQuantity;
                alert(`Only ${maxQuantity} copies of this book are available.`);
            }

            // Update UI immediately
            document.getElementById(`quantity-${bookId}`).value = newQuantity;
            document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * newQuantity).toFixed(2)}`;

            // Update increment button state
            const incrementButton = document.getElementById(`increment-${bookId}`);
            if (newQuantity >= maxQuantity) {
                incrementButton.classList.add('opacity-50', 'cursor-not-allowed');
                incrementButton.setAttribute('disabled', 'disabled');
            } else {
                incrementButton.classList.remove('opacity-50', 'cursor-not-allowed');
                incrementButton.removeAttribute('disabled');
            }

            // Update cart items array
            if (item) {
                item.quantity = newQuantity;
            }

            // Update total cart price
            let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;

            // Send AJAX request to update server
            fetch('@Url.Action("UpdateCartQuantity", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ bookId: bookId, quantity: newQuantity })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message);
                    // Revert UI if server validation fails
                    let originalItem = cartItems.find(i => i.bookId === bookId);
                    let originalQuantity = originalItem ? originalItem.quantity : 1;
                    document.getElementById(`quantity-${bookId}`).value = originalQuantity;
                    document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * originalQuantity).toFixed(2)}`;
                    totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            });
        }
    </script>
}