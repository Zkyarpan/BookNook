@model IEnumerable<BookNook.Models.CartWithDiscountViewModel>

@{
    ViewData["Title"] = "My Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="bg-gradient-to-br from-[#4b2e83]/10 via-[#fbbf24]/10 to-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-merriweather text-[#4b2e83] text-center mb-8">My Cart</h2>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="bg-green-100 text-green-800 p-3 rounded-lg mb-6 text-center font-medium">
                @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="bg-red-100 text-red-800 p-3 rounded-lg mb-6 text-center font-medium">
                @TempData["ErrorMessage"]
            </div>
        }

        @if (!Model.Any())
        {
            <p class="text-center text-slate-600 text-lg">Your cart is empty.</p>
        }
        else
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                @foreach (var item in Model)
                {
                    var b = item.CartItem.Book;
                    var unitPrice = item.IsDiscountActive ? item.DiscountedPrice : b.Price;
                    <div class="relative bg-white rounded-2xl shadow-lg p-4 flex flex-col">
                        @if (item.IsDiscountActive)
                        {
                            <span class="absolute top-3 right-3 bg-red-600 text-white text-xs font-semibold px-2 py-0.5 rounded-full">SALE</span>
                        }

                        <div class="h-40 mb-4 overflow-hidden rounded-lg">
                            @if (!string.IsNullOrEmpty(b.CoverImageUrl))
                            {
                                <a asp-controller="Books" asp-action="Details" asp-route-id="@b.Id">
                                    <img src="@b.CoverImageUrl" alt="@b.Title"
                                         class="w-full h-full object-cover hover:scale-105 transition" />
                                </a>
                            }
                            else
                            {
                                <div class="w-full h-full bg-slate-200 flex items-center justify-center">
                                    <span class="text-slate-500">No Image</span>
                                </div>
                            }
                        </div>

                        <h3 class="font-medium text-[#4b2e83] text-lg line-clamp-2 mb-1">
                            <a asp-controller="Books" asp-action="Details" asp-route-id="@b.Id">
                                @b.Title
                            </a>
                        </h3>
                        <p class="text-slate-600 text-sm mb-2">by @b.Author</p>

                        <div class="flex items-baseline mb-2">
                            @if (item.IsDiscountActive)
                            {
                                <span class="line-through text-slate-400 mr-2">$@b.Price</span>
                                <span class="text-[#4b2e83] font-semibold">$@unitPrice</span>
                            }
                            else
                            {
                                <span class="text-slate-700 font-semibold">$@unitPrice</span>
                            }
                        </div>

                        <p class="text-slate-500 text-sm mb-2">In stock: <span id="stock-@b.Id">@b.Quantity</span></p>

                        <div class="flex items-center mb-3">
                            <button onclick="updateQuantity(@b.Id, @item.CartItem.Quantity - 1, @unitPrice)"
                                    class="px-2 py-1 bg-gray-200 rounded-l hover:bg-gray-300 disabled:opacity-50"
                            @(item.CartItem.Quantity <= 1 ? "disabled" : "")>
                                –
                            </button>
                            <input type="number" id="quantity-@b.Id" min="1"
                                   value="@item.CartItem.Quantity"
                                   onchange="updateQuantity(@b.Id, this.value, @unitPrice)"
                                   class="w-12 text-center border-t border-b border-gray-200" />
                            <button onclick="updateQuantity(@b.Id, @item.CartItem.Quantity + 1, @unitPrice)"
                                    id="increment-@b.Id"
                                    class="px-2 py-1 bg-gray-200 rounded-r hover:bg-gray-300">
                                +
                            </button>
                        </div>

                        <p class="text-slate-700 font-medium mb-4" id="line-total-@b.Id">
                            Total: $@(unitPrice * item.CartItem.Quantity)
                        </p>

                        <form asp-action="RemoveFromCart" method="post" class="mt-auto">
                            <input type="hidden" name="bookId" value="@b.Id" />
                            <button type="submit"
                                    class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-2 rounded-lg">
                                Remove
                            </button>
                        </form>
                    </div>
                }
            </div>

            <div class="mt-10 text-right">
                <p class="text-xl font-semibold text-[#4b2e83] mb-4">
                    Grand Total:
                    <span id="total-cart-price">
                        $@Model.Sum(c => (c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price) * c.CartItem.Quantity)
                    </span>
                </p>
                <a asp-action="Checkout" asp-controller="Cart"
                   class="inline-block bg-[#fbbf24] hover:bg-[#f8d267] text-[#4b2e83] font-semibold py-2 px-6 rounded-full">
                    Proceed to Checkout
                </a>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        let cartItems = @Html.Raw(Json.Serialize(Model.Select(c => new { bookId = c.CartItem.Book.Id, quantity = c.CartItem.Quantity, price = c.IsDiscountActive ? c.DiscountedPrice : c.CartItem.Book.Price, stock = c.CartItem.Book.Quantity })));

        async function fetchStock(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetBookStock", "Books")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch stock');
                }
                const data = await response.json();
                return data.stock;
            } catch (error) {
                console.error('Error fetching stock:', error);
                let item = cartItems.find(i => i.bookId === bookId);
                return item ? item.stock : 0;
            }
        }

        async function fetchCartItem(bookId) {
            try {
                const response = await fetch(`@Url.Action("GetCartItem", "Cart")?bookId=${bookId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch cart item');
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching cart item:', error);
                return null;
            }
        }

        async function updateQuantity(bookId, newQuantity, price) {
            // Fetch the latest cart item data
            const cartItemData = await fetchCartItem(bookId);
            if (!cartItemData || !cartItemData.exists) {
                alert('Book not in your cart.');
                // Remove the item from the UI
                const itemElement = document.querySelector(`[data-cart-item="${bookId}"]`);
                if (itemElement) {
                    itemElement.remove();
                }
                // Update total cart price
                cartItems = cartItems.filter(item => item.bookId !== bookId);
                let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                return;
            }

            // Fetch the latest stock
            const maxQuantity = await fetchStock(bookId);

            // Update stock display
            document.querySelector(`[data-stock="${bookId}"]`).textContent = `In Stock: ${maxQuantity}`;

            // Update cart items array with new stock
            let item = cartItems.find(i => i.bookId === bookId);
            if (item) {
                item.stock = maxQuantity;
            }

            // Validate quantity
            if (newQuantity < 1) {
                newQuantity = 1;
            }
            if (newQuantity > maxQuantity) {
                newQuantity = maxQuantity;
                alert(`Only ${maxQuantity} copies of this book are available.`);
            }

            // Update UI immediately
            document.getElementById(`quantity-${bookId}`).value = newQuantity;
            document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * newQuantity).toFixed(2)}`;

            // Update increment button state
            const incrementButton = document.getElementById(`increment-${bookId}`);
            if (newQuantity >= maxQuantity) {
                incrementButton.classList.add('opacity-50', 'cursor-not-allowed');
                incrementButton.setAttribute('disabled', 'disabled');
            } else {
                incrementButton.classList.remove('opacity-50', 'cursor-not-allowed');
                incrementButton.removeAttribute('disabled');
            }

            // Update cart items array
            if (item) {
                item.quantity = newQuantity;
            }

            // Update total cart price
            let totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;

            // Send AJAX request to update server
            fetch('@Url.Action("UpdateCartQuantity", "Cart")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ bookId: bookId, quantity: newQuantity })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message);
                    // Revert UI if server validation fails
                    let originalItem = cartItems.find(i => i.bookId === bookId);
                    let originalQuantity = originalItem ? originalItem.quantity : 1;
                    document.getElementById(`quantity-${bookId}`).value = originalQuantity;
                    document.querySelector(`[data-total-price="${bookId}"]`).textContent = `Total: $${(price * originalQuantity).toFixed(2)}`;
                    totalCartPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    document.getElementById('total-cart-price').textContent = `Total Price: $${totalCartPrice.toFixed(2)}`;
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                alert('Failed to update quantity. Please try again.');
            });
        }
    </script>
}