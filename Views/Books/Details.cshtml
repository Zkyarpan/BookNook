@model BookHive.Models.BookWithDiscountViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<BookHive.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "Book Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- ─────────────  INLINE STYLES  ───────────── -->
<style>
    /* star colours */
    .star-rating {
        color: #fbbf24;
        font-size: 16px;
    }

        .star-rating .empty {
            color: #d1d5db;
        }

    /* flash / ajax messages */
    .message {
        display: none;
        padding: 10px;
        margin-top: 10px;
        border-radius: 6px;
    }

    .success-message {
        background: #d1fae5;
        color: #065f46;
    }

    .error-message {
        background: #fee2e2;
        color: #991b1b;
    }

    /* recommendation hover */
    .recommendation-card {
        transition: transform .3s ease;
    }

        .recommendation-card:hover {
            transform: scale(1.05);
        }
</style>

<!-- ─────────────  PAGE  ───────────── -->
<div class="max-w-4xl mx-auto px-4 py-12">

    <!-- flash messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-emerald-100 text-emerald-700 text-center py-3 px-4 rounded mb-6 shadow">
            @TempData["SuccessMessage"]
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-rose-100 text-rose-700 text-center py-3 px-4 rounded mb-6 shadow">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- main card -->
    <div class="bg-white/90 backdrop-blur border border-slate-200 rounded-2xl shadow-lg p-8">

        <!-- cover + info -->
        <div class="flex flex-col md:flex-row gap-8">
            <!-- cover -->
            @if (!string.IsNullOrEmpty(Model.Book.CoverImageUrl))
            {
                <img src="@Model.Book.CoverImageUrl" alt="@Model.Book.Title"
                     class="w-48 h-48 object-contain rounded-xl self-center md:self-start">
            }
            else
            {
                <div class="w-48 h-48 bg-slate-200 flex items-center justify-center rounded-xl text-xs text-slate-600">
                    No Image
                </div>
            }

            <!-- details -->
            <div class="flex-1">

                <!-- title & author -->
                <h1 class="text-2xl font-merriweather text-[#4b2e83] mb-2">@Model.Book.Title</h1>
                <p class="text-xs text-slate-600 mb-4">
                    by <strong>@Model.Book.Author</strong>
                    <span class="mx-1">|</span>
                    <a href="#" class="text-[#4b2e83] hover:underline">More by this author</a>
                </p>

                <!-- average rating -->
                @{
                    var avg = Model.Reviews.Any() ? Model.Reviews.Average(r => r.Rating) : 0;
                    var full = (int)avg;
                    var half = avg - full >= 0.5;
                    var empty = 5 - full - (half ? 1 : 0);
                }
                <div class="flex items-center mb-3">
                    <div class="star-rating">
                        @for (int i = 0; i < full; i++)
                        {
                            <span>★</span>
                        }
                        @if (half)
                        {
                            <span>☆</span>
                        }
                        @for (int i = 0; i < empty; i++)
                        {
                            <span class="empty">★</span>
                        }
                    </div>
                    <span class="text-xs text-slate-500 ml-2">(@Model.Reviews.Count)</span>
                </div>

                <!-- price -->
                @if (Model.IsDiscountActive)
                {
                    <p class="text-lg font-semibold text-[#4b2e83] mb-2">
                        $<span id="base-price">@Model.DiscountedPrice</span>
                        <span class="line-through text-slate-400 ml-2 text-sm">$@Model.Book.Price</span>
                        <span class="text-rose-600 text-sm ml-2">
                            @((int)((Model.Book.Price - Model.DiscountedPrice) / Model.Book.Price * 100))% off
                        </span>
                    </p>
                    @if (Model.OnSaleFlag)
                    {
                        <p class="text-xs text-rose-600 mb-2">PROMOTION: Min spend $400</p>
                    }
                }
                else
                {
                    <p class="text-lg font-semibold text-[#4b2e83] mb-2">
                        $<span id="base-price">@Model.Book.Price</span>
                    </p>
                }

                <!-- description & stock -->
                <p class="text-sm text-slate-700 mb-3"><strong>Description:</strong> @Model.Book.Description</p>
                <p class="text-sm mb-4">
                    <strong>Stock:</strong>
                    @(
                        Model.Book.Quantity > 0
                        ? $"Qty: {Model.Book.Quantity}"
                        : Html.Raw("<span class=\"text-rose-600\">Out&nbsp;of&nbsp;Stock</span>")
                        )
                </p>


                <!-- purchase controls -->
                @if (User.Identity.IsAuthenticated)
                {
                    var currentUser = await UserManager.GetUserAsync(User);
                    if (currentUser != null)
                    {
                        if (!(await UserManager.IsInRoleAsync(currentUser, "Admin") || await UserManager.IsInRoleAsync(currentUser, "Staff")))
                        {
                            <!-- quantity & add‑to‑cart -->
                            <div class="flex flex-col sm:flex-row sm:items-center gap-4 mb-4">

                                <!-- qty selector -->
                                <div class="flex items-center">
                                    <span class="text-xs mr-2">Qty</span>
                                    <button id="decrement-btn" type="button"
                                            class="px-2 py-1 bg-slate-200 text-slate-700 rounded-l text-sm">
                                        −
                                    </button>
                                    <input id="quantity" name="quantity" type="number" value="1" min="1"
                                           max="@Model.Book.Quantity"
                                           class="w-12 text-center border-y border-slate-200 text-sm" readonly>
                                    <button id="increment-btn" type="button"
                                            class="px-2 py-1 bg-slate-200 text-slate-700 rounded-r text-sm">
                                        +
                                    </button>
                                </div>

                                <!-- add‑to‑cart -->
                                <form id="add-to-cart-form" method="post" class="shrink-0">
                                    <input type="hidden" id="add-to-cart-quantity" name="quantity" value="1">
                                    <button type="button" onclick="addToCart(@Model.Book.Id)"
                                            class="bg-[var(--orange,#f97316)] hover:bg-[var(--orange-dark,#ea580c)] text-white text-xs font-semibold py-2 px-4 rounded-lg shadow
                                                   @(Model.Book.Quantity == 0 ? "opacity-40 cursor-not-allowed" : "")"
                                    @(Model.Book.Quantity == 0 ? "disabled" : "")>
                                        Add to Cart
                                    </button>
                                </form>
                            </div>

                            <p class="text-sm">
                                <strong>Total:</strong>
                                $<span id="total-price">@((Model.IsDiscountActive ? Model.DiscountedPrice : Model.Book.Price).ToString("0.00"))</span>
                            </p>
                            <div id="cart-message" class="message"></div>
                        }

                        <!-- ADMIN BUTTONS -->
                        if (await UserManager.IsInRoleAsync(currentUser, "Admin"))
                        {
                            <div class="flex flex-wrap gap-2 mt-6">
                                <a asp-action="Edit" asp-route-id="@Model.Book.Id"
                                   class="bg-[#4b2e83] hover:bg-[#3c226a] text-white text-xs font-semibold py-2 px-4 rounded-lg shadow">
                                    Edit
                                </a>
                                <a asp-action="Delete" asp-route-id="@Model.Book.Id"
                                   class="bg-red-600 hover:bg-red-700 text-white text-xs font-semibold py-2 px-4 rounded-lg shadow">
                                    Delete
                                </a>
                                <a asp-action="ManageDiscounts" asp-route-id="@Model.Book.Id"
                                   class="bg-[#4b2e83] hover:bg-[#3c226a] text-white text-xs font-semibold py-2 px-4 rounded-lg shadow">
                                    Manage Discounts
                                </a>
                            </div>
                        }
                    }
                }
            </div>
        </div>

        <!-- REVIEWS -->
        <div class="mt-12">
            <h2 class="text-lg font-semibold text-[#4b2e83] mb-4">Reviews</h2>

            @if (!Model.Reviews.Any())
            {
                <p class="text-sm text-slate-500">No reviews yet.</p>
            }
            else
            {
                <div id="reviews-list" class="space-y-6">
                    @foreach (var review in Model.Reviews)
                    {
                        <div class="border-b border-slate-200 pb-4">
                            <!-- rating + meta -->
                            <div class="flex items-center mb-1">
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= review.Rating)
                                        {
                                            <span>★</span>
                                        }
                                        else
                                        {
                                            <span class="empty">★</span>
                                        }
                                    }
                                </div>
                                <span class="text-xs text-slate-700 ml-2">@review.User.FirstName</span>
                                <span class="text-xs text-slate-400 ml-2">@review.ReviewDate:d MMM yyyy</span>
                            </div>
                            <p class="text-sm text-slate-600">@review.Comment</p>

                            <!-- replies -->
                            <div class="mt-2 space-y-2 pl-4 border-l-2 border-slate-200">
                                @if (review.Replies != null && review.Replies.Any())
                                {
                                    foreach (var rep in review.Replies)
                                    {
                                        <div>
                                            <div class="flex items-center text-xs mb-0.5">
                                                <span class="font-semibold text-slate-700">@rep.User.FirstName</span>
                                                <span class="ml-2 text-slate-400">@rep.ReviewDate:d MMM yyyy</span>
                                            </div>
                                            <p class="text-xs text-slate-600">@rep.Comment</p>
                                        </div>
                                    }
                                }
                            </div>

                            <!-- reply form -->
                            @if (User.Identity.IsAuthenticated)
                            {
                                var currentUserReply = await UserManager.GetUserAsync(User);
                                if (currentUserReply != null &&
                                !(await UserManager.IsInRoleAsync(currentUserReply, "Admin") || await UserManager.IsInRoleAsync(currentUserReply, "Staff"))
                                && ViewBag.HasPurchased)
                                {
                                    <form id="reply-form-@review.Id" class="mt-2 space-y-2">
                                        <input type="hidden" name="bookId" value="@Model.Book.Id">
                                        <input type="hidden" name="parentReviewId" value="@review.Id">

                                        <textarea name="comment" rows="3"
                                                  class="w-full p-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[#fbbf24] text-sm"
                                                  placeholder="Write a reply…"></textarea>
                                        <span id="reply-comment-error-@review.Id" class="text-rose-600 text-xs hidden"></span>

                                        <button type="button" onclick="submitReply(@review.Id)"
                                                class="bg-[#4b2e83] hover:bg-[#3c226a] text-white text-xs font-semibold py-1.5 px-4 rounded-lg shadow">
                                            Reply
                                        </button>
                                    </form>
                                    <div id="reply-message-@review.Id" class="message"></div>
                                }
                            }
                        </div>
                    }
                </div>
            }

            <!-- write review -->
            @if (User.Identity.IsAuthenticated)
            {
                var currentUserReview = await UserManager.GetUserAsync(User);
                if (currentUserReview != null &&
                !(await UserManager.IsInRoleAsync(currentUserReview, "Admin") || await UserManager.IsInRoleAsync(currentUserReview, "Staff"))
                && ViewBag.HasPurchased)
                {
                    var existingReview = Model.Reviews.FirstOrDefault(r => r.UserId == currentUserReview.Id && r.ParentReviewId == null);
                    if (existingReview == null)
                    {
                        <div class="mt-8">
                            <h3 class="text-md font-semibold text-[#4b2e83] mb-2">Write a Review</h3>
                            <form id="review-form" class="space-y-4">
                                <input type="hidden" name="bookId" value="@Model.Book.Id">

                                <div>
                                    <label class="block text-xs font-medium text-slate-700 mb-1">Rating (1‑5)</label>
                                    <select name="rating" id="review-rating"
                                            class="w-24 p-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[#fbbf24] text-sm">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <option>@i</option>
                                        }
                                    </select>
                                    <span id="rating-error" class="text-rose-600 text-xs hidden"></span>
                                </div>

                                <div>
                                    <label class="block text-xs font-medium text-slate-700 mb-1">Comment</label>
                                    <textarea name="comment" id="review-comment" rows="5"
                                              class="w-full p-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[#fbbf24] text-sm"></textarea>
                                    <span id="comment-error" class="text-rose-600 text-xs hidden"></span>
                                </div>

                                <button type="button" onclick="submitReview()"
                                        class="bg-[#4b2e83] hover:bg-[#3c226a] text-white text-sm font-semibold py-2 px-6 rounded-lg shadow">
                                    Submit Review
                                </button>
                            </form>
                            <div id="review-message" class="message"></div>
                        </div>
                    }
                }
            }
        </div>

        <!-- RECOMMENDATIONS -->
        <div class="mt-12">
            <h2 class="text-lg font-semibold text-[#4b2e83] mb-4">Recommendations</h2>

            <!-- most rated -->
            <h3 class="text-sm font-semibold text-slate-700 mb-2">Most Rated Books</h3>
            @if (ViewBag.MostRatedBooks != null && ((List<BookWithDiscountViewModel>)ViewBag.MostRatedBooks).Count > 0)
            {
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 mb-8">
                    @foreach (var rec in ViewBag.MostRatedBooks as List<BookWithDiscountViewModel>)
                    {
                        var b = rec.Book;
                        <div class="recommendation-card bg-[#fbbf24]/20 rounded-lg shadow p-4 flex flex-col">
                            @if (!string.IsNullOrEmpty(b.CoverImageUrl))
                            {
                                <a asp-controller="Books" asp-action="Details" asp-route-id="@b.Id">
                                    <img src="@b.CoverImageUrl" alt="@b.Title" class="w-full h-36 object-cover rounded mb-2" />
                                </a>
                            }
                            else
                            {
                                <div class="w-full h-36 bg-slate-200 flex items-center justify-center rounded mb-2 text-xs text-slate-600">
                                    No Image
                                </div>
                            }
                            <p class="text-xs font-medium text-[#4b2e83] line-clamp-2">@b.Title</p>
                            <p class="text-[10px] text-slate-600">by @b.Author</p>
                            <p class="text-xs text-slate-700">$@b.Price</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-xs text-slate-500 mb-8">No recommendations.</p>
            }

            <!-- most ordered -->
            <h3 class="text-sm font-semibold text-slate-700 mb-2">Most Ordered Books</h3>
            @if (ViewBag.MostOrderedBooks != null && ((List<BookWithDiscountViewModel>)ViewBag.MostOrderedBooks).Count > 0)
            {
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                    @foreach (var rec in ViewBag.MostOrderedBooks as List<BookWithDiscountViewModel>)
                    {
                        var b = rec.Book;
                        <div class="recommendation-card bg-[#fbbf24]/20 rounded-lg shadow p-4 flex flex-col">
                            @if (!string.IsNullOrEmpty(b.CoverImageUrl))
                            {
                                <a asp-controller="Books" asp-action="Details" asp-route-id="@b.Id">
                                    <img src="@b.CoverImageUrl" alt="@b.Title" class="w-full h-36 object-cover rounded mb-2" />
                                </a>
                            }
                            else
                            {
                                <div class="w-full h-36 bg-slate-200 flex items-center justify-center rounded mb-2 text-xs text-slate-600">
                                    No Image
                                </div>
                            }
                            <p class="text-xs font-medium text-[#4b2e83] line-clamp-2">@b.Title</p>
                            <p class="text-[10px] text-slate-600">by @b.Author</p>
                            <p class="text-xs text-slate-700">$@b.Price</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-xs text-slate-500">No recommendations.</p>
            }
        </div>

        <!-- back link -->
        <div class="mt-10 text-center">
            <a asp-controller="Books" asp-action="Index"
               class="bg-slate-500 hover:bg-slate-600 text-white text-sm font-semibold py-2 px-6 rounded-lg shadow">
                ← Back to Books
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        /* quantity logic */
        const quantityInput = document.getElementById('quantity');
        const addToCartQuantity = document.getElementById('add-to-cart-quantity');
        const maxQuantity = @Model.Book.Quantity;
        const decrementBtn = document.getElementById('decrement-btn');
        const incrementBtn = document.getElementById('increment-btn');
        const basePrice = @Model.IsDiscountActive ? @Model.DiscountedPrice : @Model.Book.Price;
        const totalPriceDisplay = document.getElementById('total-price');
        const cartMessage = document.getElementById('cart-message');

        function updateQuantity(change) {
            let q = parseInt(quantityInput.value) + change;
            q = Math.max(1, Math.min(maxQuantity, q));
            quantityInput.value = addToCartQuantity.value = q;
            totalPriceDisplay.textContent = (basePrice * q).toFixed(2);
            decrementBtn.disabled = q <= 1;
            incrementBtn.disabled = q >= maxQuantity;
        }

        /* add to cart */
        function addToCart(bookId) {
            const form = document.getElementById('add-to-cart-form');
            const data = new FormData(form);
            data.append('id', bookId);

            $.ajax({
                url: '@Url.Action("AddToCart", "Books")',
                type: 'POST',
                data: data,
                processData: false,
                contentType: false,
                headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                success: (res) => {
                    cartMessage.className = res.success ? 'message success-message' : 'message error-message';
                    cartMessage.textContent = res.success ? 'Cart was added' : 'Cart was not added: ' + res.message;
                    cartMessage.style.display = 'block';
                    setTimeout(() => cartMessage.style.display = 'none', 3000);
                },
                error: (xhr, _, err) => {
                    cartMessage.className = 'message error-message';
                    cartMessage.textContent = 'An error occurred while adding to cart: ' + (xhr.responseText || err);
                    cartMessage.style.display = 'block';
                    setTimeout(() => cartMessage.style.display = 'none', 3000);
                }
            });
        }

        /* submit review */
        function submitReview() {
            const form = document.getElementById('review-form');
            const data = new FormData(form);
            const rating = parseInt(data.get('rating'));
            const comment = data.get('comment').trim();
            const reviewMessage = document.getElementById('review-message');
            const reviewsList = document.getElementById('reviews-list');
            const ratingError = document.getElementById('rating-error');
            const commentError = document.getElementById('comment-error');

            ratingError.style.display = commentError.style.display = 'none';

            if (rating < 1 || rating > 5) {
                ratingError.textContent = 'Rating must be between 1 and 5.'; ratingError.style.display = 'block'; return;
            }
            if (!comment) {
                commentError.textContent = 'Comment is required.'; commentError.style.display = 'block'; return;
            }

            $.ajax({
                url: '@Url.Action("Create", "Reviews")',
                type: 'POST',
                data: data,
                processData: false,
                contentType: false,
                headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                success: (res) => {
                    if (res.success) {
                        reviewMessage.className = 'message success-message';
                        reviewMessage.textContent = res.message;
                        reviewMessage.style.display = 'block';
                        setTimeout(() => reviewMessage.style.display = 'none', 3000);

                        const html = `
                            <div class="border-b border-slate-200 pb-4">
                                <div class="flex items-center mb-1">
                                    <div class="star-rating">
                                        ${'★'.repeat(res.review.rating)}${'<span class="empty">★</span>'.repeat(5-res.review.rating)}
                                    </div>
                                    <span class="text-xs text-slate-700 ml-2">${res.review.userName}</span>
                                    <span class="text-xs text-slate-400 ml-2">${res.review.reviewDate}</span>
                                </div>
                                <p class="text-sm text-slate-600">${res.review.comment}</p>
                                <div class="mt-2 space-y-2 pl-4 border-l-2 border-slate-200"></div>
                            </div>`;
                        reviewsList.insertAdjacentHTML('beforeend', html);

                        document.getElementById('review-comment').value = '';
                        document.getElementById('review-rating').value = '1';
                    } else {
                        reviewMessage.className = 'message error-message';
                        reviewMessage.textContent = res.message;
                        reviewMessage.style.display = 'block';
                        setTimeout(() => reviewMessage.style.display = 'none', 3000);
                    }
                },
                error: (xhr, _, err) => {
                    reviewMessage.className = 'message error-message';
                    reviewMessage.textContent = 'An error occurred while submitting your review: ' + (xhr.responseText || err);
                    reviewMessage.style.display = 'block';
                    setTimeout(() => reviewMessage.style.display = 'none', 3000);
                }
            });
        }

        /* submit reply */
        function submitReply(id) {
            const form = document.getElementById('reply-form-' + id);
            const data = new FormData(form);
            const comment = data.get('comment').trim();
            const replyMessage = document.getElementById('reply-message-' + id);
            const commentError = document.getElementById('reply-comment-error-' + id);

            commentError.style.display = 'none';
            if (!comment) {
                commentError.textContent = 'Comment is required.'; commentError.style.display = 'block'; return;
            }

            $.ajax({
                url: '@Url.Action("CreateReply", "Reviews")',
                type: 'POST',
                data: data,
                processData: false,
                contentType: false,
                headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                success: (res) => {
                    if (res.success) {
                        replyMessage.className = 'message success-message';
                        replyMessage.textContent = res.message;
                        replyMessage.style.display = 'block';
                        setTimeout(() => replyMessage.style.display = 'none', 3000);

                        const html = `
                            <div>
                                <div class="flex items-center text-xs mb-0.5">
                                    <span class="font-semibold text-slate-700">${res.reply.userName}</span>
                                    <span class="ml-2 text-slate-400">${res.reply.reviewDate}</span>
                                </div>
                                <p class="text-xs text-slate-600">${res.reply.comment}</p>
                            </div>`;
                        form.parentElement.querySelector('.replies').insertAdjacentHTML('beforeend', html);

                        form.querySelector('textarea[name="comment"]').value = '';
                    } else {
                        replyMessage.className = 'message error-message';
                        replyMessage.textContent = res.message;
                        replyMessage.style.display = 'block';
                        setTimeout(() => replyMessage.style.display = 'none', 3000);
                    }
                },
                error: (xhr, _, err) => {
                    replyMessage.className = 'message error-message';
                    replyMessage.textContent = 'An error occurred while submitting your reply: ' + (xhr.responseText || err);
                    replyMessage.style.display = 'block';
                    setTimeout(() => replyMessage.style.display = 'none', 3000);
                }
            });
        }

        /* initialise qty buttons */
        decrementBtn.disabled = true;
        incrementBtn.disabled = maxQuantity <= 1;
    </script>
}
