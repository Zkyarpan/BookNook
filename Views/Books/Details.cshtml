@model BookNook.Models.BookWithDiscountViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<BookNook.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "Book Details";
    // Hard-code “today” as May 13, 2025 for your demo
    var today = new DateTime(2025, 5, 13);
    bool isUpcoming = Model.Book.IsComingSoon
                      && Model.Book.ReleaseDate.HasValue
                      && Model.Book.ReleaseDate.Value > today;
}

<div class="container mx-auto px-4 py-8 max-w-4xl">
    <!-- Success / Error banners -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 text-green-700 p-4 rounded-lg mb-6 text-center">
            @TempData["SuccessMessage"]
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 text-red-700 p-4 rounded-lg mb-6 text-center">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
        <div class="p-8">
            <!-- Title -->
            <h1 class="text-3xl font-merriweather text-[#4b2e83] mb-4">
                @Model.Book.Title
            </h1>

            <!-- Upcoming badge -->
            @if (isUpcoming)
            {
                <div class="bg-yellow-100 text-yellow-800 p-3 rounded-lg mb-6 font-semibold text-center">
                    Upcoming release on @Model.Book.ReleaseDate.Value.ToString("d MMM yyyy")
                </div>
            }

            <div class="flex flex-col md:flex-row gap-8">
                <!-- Cover -->
                <div class="flex-shrink-0">
                    @if (!string.IsNullOrEmpty(Model.Book.CoverImageUrl))
                    {
                        <img src="@Model.Book.CoverImageUrl"
                             alt="@Model.Book.Title"
                             class="w-48 h-64 object-cover rounded-lg shadow" />
                    }
                    else
                    {
                        <div class="w-48 h-64 bg-gray-200 flex items-center justify-center rounded-lg">
                            <span class="text-gray-500">No Image</span>
                        </div>
                    }
                </div>

                <div class="flex-1 space-y-4">
                    <!-- Author & link -->
                    <p class="text-gray-600">
                        <span class="font-semibold">Author:</span> @Model.Book.Author
                        <a href="#" class="text-[#4b2e83] hover:underline ml-2">More by this author</a>
                    </p>

                    <!-- Rating -->
                    @{
                        var avg = Model.Reviews.Any()
                        ? Model.Reviews.Average(r => r.Rating)
                        : 0;
                        int full = (int)avg;
                        bool half = avg - full >= 0.5;
                        int empty = 5 - full - (half ? 1 : 0);
                    }
                    <div class="star-rating flex items-center text-[#f59e0b] text-lg">
                        @for (int i = 0; i < full; i++)
                        {
                            <span>★</span>
                        }
                        @if (half)
                        {
                            <span>☆</span>
                        }
                        @for (int i = 0; i < empty; i++)
                        {
                            <span class="empty">★</span>
                        }
                        <span class="text-gray-600 text-sm ml-2">(@Model.Reviews.Count() reviews)</span>
                    </div>

                    <!-- Price / Discount -->
                    <div>
                        @if (Model.IsDiscountActive)
                        {
                            <p class="text-2xl font-bold text-[#4b2e83]">
                                $@Model.DiscountedPrice
                                <span class="line-through text-gray-400 ml-2">$@Model.Book.Price</span>
                                <span class="text-[#fbbf24] ml-2">
                                    @((int)((Model.Book.Price - Model.DiscountedPrice) / Model.Book.Price * 100))% off
                                </span>
                            </p>
                            @if (Model.OnSaleFlag)
                            {
                                <p class="text-sm text-[#92400e]">Promo: Min. spend $400</p>
                            }
                        }
                        else
                        {
                            <p class="text-2xl font-bold text-[#4b2e83]">
                                $@Model.Book.Price
                            </p>
                        }
                    </div>

                    <!-- Description -->
                    <p class="text-gray-700">
                        <strong>Description:</strong> @Model.Book.Description
                    </p>

                    <!-- Stock + Add-to-cart or Admin actions -->
                    @if (User.Identity.IsAuthenticated)
                    {
                        var user = await UserManager.GetUserAsync(User);
                        bool isAdmin = user != null && await UserManager.IsInRoleAsync(user, "Admin");
                        bool isMember = user != null && !(await UserManager.IsInRoleAsync(user, "Admin")
                        || await UserManager.IsInRoleAsync(user, "Staff"));

                        @* Members can add to cart (unless it’s upcoming or out of stock) *@
                        if (isMember)
                        {
                            <div class="flex items-center gap-4">
                                <div class="flex items-center">
                                    <button type="button"
                                            onclick="updateQuantity(-1)"
                                            class="px-3 py-1 bg-gray-300 rounded-l hover:bg-gray-400"
                                            id="decrement-btn">
                                        −
                                    </button>
                                    <input type="text"
                                           id="quantity"
                                           class="w-12 text-center border-t border-b border-gray-300"
                                           value="1" readonly />
                                    <button type="button"
                                            onclick="updateQuantity(1)"
                                            class="px-3 py-1 bg-gray-300 rounded-r hover:bg-gray-400"
                                            id="increment-btn">
                                        +
                                    </button>
                                </div>
                                <form id="add-to-cart-form" class="inline-block">
                                    <input type="hidden" id="add-to-cart-quantity" name="quantity" value="1" />
                                    <button type="button"
                                            onclick="addToCart(@Model.Book.Id)"
                                            class="bg-[#fbbf24] text-[#4b2e83] font-semibold py-2 px-6 rounded-full hover:bg-[#f8d267] transition
                                                   @(Model.Book.Quantity == 0 || isUpcoming ? "opacity-50 cursor-not-allowed" : "")"
                                    @(Model.Book.Quantity == 0 || isUpcoming ? "disabled" : "")>
                                        Add to Cart
                                    </button>
                                </form>
                            </div>
                            <div id="cart-message" class="message"></div>
                        }
                        else if (isAdmin)
                        {
                            <div class="flex gap-3">
                                <a asp-action="Edit" asp-route-id="@Model.Book.Id"
                                   class="bg-[#4b2e83] text-white py-2 px-4 rounded hover:bg-[#3c226a]">
                                    Edit
                                </a>
                                <a asp-action="Delete" asp-route-id="@Model.Book.Id"
                                   class="bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700">
                                    Delete
                                </a>
                                <a asp-action="ManageDiscounts" asp-route-id="@Model.Book.Id"
                                   class="bg-[#4b2e83] text-white py-2 px-4 rounded hover:bg-[#3c226a]">
                                    Discounts
                                </a>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Additional Details -->
            <section class="mt-12">
                <h2 class="text-xl font-semibold text-[#4b2e83] mb-4 border-b border-amber-200 pb-2">
                    Additional Details
                </h2>
                <dl class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-gray-700">
                    <div><dt class="font-medium">Genre:</dt> <dd>@(Model.Book.Genre ?? "–")</dd></div>
                    <div>
                        <dt class="font-medium">Publication:</dt>
                        <dd>
                            @(Model.Book.PublicationDate != DateTime.MinValue
                                ? Model.Book.PublicationDate.ToString("d MMM yyyy")
                                : "–")
                        </dd>
                    </div>
                    <div><dt class="font-medium">ISBN:</dt> <dd>@(Model.Book.ISBN ?? "–")</dd></div>
                    <div><dt class="font-medium">Language:</dt> <dd>@(Model.Book.Language ?? "–")</dd></div>
                    <div><dt class="font-medium">Format:</dt> <dd>@(Model.Book.Format ?? "–")</dd></div>
                    <div><dt class="font-medium">Publisher:</dt> <dd>@(Model.Book.Publisher ?? "–")</dd></div>
                    <div>
                        <dt class="font-medium">Library Access:</dt>
                        <dd>@(Model.Book.IsPhysicalLibraryAccess ? "Yes" : "No")</dd>
                    </div>
                    <div>
                        <dt class="font-medium">Bestseller:</dt>
                        <dd>@(Model.Book.IsBestseller ? "Yes" : "No")</dd>
                    </div>
                    <div>
                        <dt class="font-medium">Award Winner:</dt>
                        <dd>@(Model.Book.IsAwardWinner ? "Yes" : "No")</dd>
                    </div>
                    <div>
                        <dt class="font-medium">Coming Soon:</dt>
                        <dd>@(Model.Book.IsComingSoon ? "Yes" : "No")</dd>
                    </div>
                    <div>
                        <dt class="font-medium">Release Date:</dt>
                        <dd>
                            @(Model.Book.ReleaseDate.HasValue
                                ? Model.Book.ReleaseDate.Value.ToString("d MMM yyyy")
                                : "–")
                        </dd>
                    </div>
                </dl>
            </section>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Qty controls
        const quantityInput = document.getElementById('quantity');
        const addToCartQty = document.getElementById('add-to-cart-quantity');
        const dec = document.getElementById('decrement-btn');
        const inc = document.getElementById('increment-btn');
        const maxQty = @Model.Book.Quantity;
        const basePrice = @Model.IsDiscountActive ? @Model.DiscountedPrice : @Model.Book.Price;
        const totalEl = document.getElementById('total-price');
        const msgEl   = document.getElementById('cart-message');

        function updateQuantity(delta) {
            let q = parseInt(quantityInput.value) + delta;
            q = Math.max(1, Math.min(maxQty, q));
            quantityInput.value = q;
            addToCartQty.value = q;
        }

        function addToCart(bookId) {
            const form = new FormData(document.getElementById('add-to-cart-form'));
            form.append('id', bookId);

            $.ajax({
                url: '@Url.Action("AddToCart", "Books")',
                type: 'POST',
                data: form,
                processData: false,
                contentType: false,
                headers:{ 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                success(res) {
                    msgEl.className = 'message ' + (res.success ? 'success-message' : 'error-message');
                    msgEl.textContent = res.message;
                    msgEl.style.display = 'block';
                    setTimeout(()=> msgEl.style.display='none', 3000);
                },
                error(err) {
                    msgEl.className = 'message error-message';
                    msgEl.textContent = 'Add to cart failed';
                    msgEl.style.display='block';
                    setTimeout(()=> msgEl.style.display='none',3000);
                }
            });
        }
    </script>
}
