@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject SignInManager<BookNook.Models.ApplicationUser> SignInManager
@inject UserManager<BookNook.Models.ApplicationUser> UserManager
@inject BookNook.Data.ApplicationDbContext _context

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - BookNook</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Merriweather:wght@400;700&display=swap" rel="stylesheet">

    <!-- SignalR client -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Merriweather', serif;
        }

        /* Notification styles */
        #notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: none;
            padding: 10px 20px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border-radius: 5px;
            font-size: 0.875rem;
            font-weight: 500;
            transition: opacity 0.5s ease-in-out;
        }

        /* Announcement styles */
        #announcement-notice {
            padding: 0;
            background: none;
            max-width: 300px;
            text-align: center;
        }

        #notice-field {
            display: block;
            padding: 5px 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border-radius: 5px;
            font-size: 0.875rem;
            font-weight: 500;
        }

            #notice-field .message {
                display: block;
                margin-bottom: 5px;
            }
    </style>
</head>
<body class="flex flex-col min-h-screen bg-gray-50 text-slate-800 antialiased">
    <!-- Order notifications -->
    <div id="notification-container"></div>

    <!-- ANNOUNCEMENTS -->
    <div id="announcement-notice" class="hidden">
        <div id="notice-field"></div>
    </div>

    <!-- NAVBAR -->
    <!-- NAVBAR -->
    <nav class="bg-[#4b2e83] text-white shadow-md">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">

                <!-- Logo -->
                <div class="flex-shrink-0">
                    <a asp-controller="Home" asp-action="Index" class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 6H6a2 2 0 00-2 2v10a2 2 0 002 2h6m6-14h-6m6 0a2 2 0 012 2v10a2 2 0 01-2 2h-6m6-14v12m0 0L10 12l8-8" />
                        </svg>
                        <span class="text-2xl font-bold text-[#fbbf24]">BookNook</span>
                    </a>
                </div>

                <!-- Primary Links -->
                <div class="hidden md:flex space-x-8">
                    <a asp-controller="Books" asp-action="Index" class="hover:text-[#fbbf24] px-3 py-2 text-sm font-medium">Books</a>
                    <a asp-controller="Announcements" asp-action="Index" class="hover:text-[#fbbf24] px-3 py-2 text-sm font-medium">Announcements</a>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var user = await UserManager.GetUserAsync(User);
                        if (await UserManager.IsInRoleAsync(user, "Admin"))
                        {
                            <a asp-controller="Admin" asp-action="Index" class="hover:text-[#fbbf24] px-3 py-2 text-sm font-medium">Dashboard</a>
                        }
                    }
                </div>

                <!-- Search Bar -->
                <div class="flex-grow max-w-lg mx-6 hidden md:block">
                    <form asp-controller="Books" asp-action="Index" method="get" class="relative">
                        <input name="search" type="text" placeholder="Search books…"
                               class="w-full pl-10 pr-4 py-2 rounded-full bg-white/20 border-0 text-white placeholder-white/70 focus:outline-none focus:ring-1 focus:ring-[#fbbf24]" />
                        <button type="submit" class="absolute left-3 top-1/2 transform -translate-y-1/2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </button>
                    </form>
                </div>

                <!-- Cart + Orders + Admin & Profile -->
                <div class="flex items-center space-x-3">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var user = await UserManager.GetUserAsync(User);
                        var isStaff = await UserManager.IsInRoleAsync(user, "Staff");

                        // Cart count
                        var cartCount = await _context.Carts
                        .Where(c => c.UserId == user.Id)
                        .Select(c => c.BookId)
                        .Distinct()
                        .CountAsync();

                        // Orders count
                        var orderCount = await _context.Orders
                        .Where(o => o.UserId == user.Id && !o.IsCancelled && o.Status != "Received")
                        .CountAsync();

                        <!-- Cart Icon -->
                        <a asp-controller="Cart" asp-action="Cart" class="relative hover:text-[#fbbf24]">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                      d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2 9m5-9v9m4-9v9m4-9l2 9" />
                            </svg>
                            <span id="cart-count"
                                  class="absolute -top-1 -right-2 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                                @cartCount
                            </span>
                        </a>

                        @if (isStaff)
                        {
                            <a asp-controller="Staff" asp-action="FulfillOrder" class="relative hover:text-[#fbbf24]">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                          d="M3 7h18M7 7v12a4 4 0 008 0V7m-8 0V3m8 4V3" />
                                </svg>
                                <span class="ml-1">Orders</span>
                            </a>
                        }

                        <!-- Orders Icon -->
                        <a asp-controller="Orders" asp-action="MyOrders" class="relative hover:text-[#fbbf24]">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                      d="M3 7h18M7 7v12a4 4 0 008 0V7m-8 0V3m8 4V3" />
                            </svg>
                            <span id="order-count"
                                  class="absolute -top-1 -right-2 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                                @orderCount
                            </span>
                        </a>

                        var isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
                        @* Admin buttons *@
                        if (isAdmin)
                        {
                            <a asp-controller="Account" asp-action="CreateStaff"
                               class="bg-[#fbbf24] text-[#4b2e83] px-3 py-1 rounded-full text-sm font-medium hover:bg-[#f9a826] transition">
                                Create Staff
                            </a>
                            <a asp-controller="Books" asp-action="Create"
                               class="border border-[#fbbf24] text-[#fbbf24] px-3 py-1 rounded-full text-sm font-medium hover:bg-[#fbbf24] hover:text-[#4b2e83] transition">
                                Add Book
                            </a>
                        }

                        @* Profile dropdown *@
                        <div class="relative">
                            <button id="profileBtn" class="flex items-center space-x-2 focus:outline-none">
                                <span class="text-sm font-medium">Hi, @user.FirstName</span>
                                <div class="w-8 h-8 bg-[#fbbf24] text-[#4b2e83] rounded-full flex items-center justify-center">
                                    @user.FirstName[0]
                                </div>
                            </button>
                            <div id="profileMenu" class="hidden absolute right-0 mt-2 w-40 bg-white text-gray-700 rounded-md shadow-lg py-1">
                                <a asp-controller="Profile" asp-action="ViewProfile" class="block px-4 py-2 text-sm hover:bg-gray-100">View Profile</a>
                                <a asp-controller="Profile" asp-action="Edit" class="block px-4 py-2 text-sm hover:bg-gray-100">Edit Profile</a>
                                <a asp-controller="Profile" asp-action="ChangePassword" class="block px-4 py-2 text-sm hover:bg-gray-100">Change Password</a>
                                <a asp-controller="Account" asp-action="Logout" class="block px-4 py-2 text-sm hover:bg-gray-100">Logout</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <a asp-controller="Account" asp-action="Login"
                           class="bg-[#fbbf24] text-[#4b2e83] px-3 py-1 rounded-full text-sm font-medium hover:bg-[#f9a826] transition">Login</a>
                        <a asp-controller="Account" asp-action="Register"
                           class="border border-[#fbbf24] text-[#fbbf24] px-3 py-1 rounded-full text-sm font-medium hover:bg-[#fbbf24] hover:text-[#4b2e83] transition">Register</a>
                    }
                </div>
            </div>
        </div>
    </nav>


    <!-- MAIN CONTENT -->
    <main class="flex-grow">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            @RenderBody()
        </div>
    </main>

    <!-- FOOTER -->
    <footer class="bg-[#4b2e83] text-gray-200">
        <div class="max-w-7xl mx-auto px-4 py-6 text-center text-sm">
            © 2025 BookNook — Your trusted online bookstore.
        </div>
    </footer>

    @Html.AntiForgeryToken()
    @RenderSection("Scripts", required: false)

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Profile dropdown
            const profileBtn = document.getElementById('profileBtn');
            const profileMenu = document.getElementById('profileMenu');
            if (profileBtn && profileMenu) {
                profileBtn.addEventListener('click', e => {
                    e.stopPropagation();
                    profileMenu.classList.toggle('hidden');
                });
                document.addEventListener('click', () => profileMenu.classList.add('hidden'));
            }

            // Order notifications via SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/orderNotificationHub")
                .build();
            let timeoutId = null;
            connection.on("ReceiveOrderNotification", message => {
                const nc = document.getElementById("notification-container");
                nc.textContent = message;
                nc.style.display = "block";
                nc.style.opacity = "1";
                if (timeoutId) clearTimeout(timeoutId);
                timeoutId = setTimeout(() => {
                    nc.style.opacity = "0";
                    setTimeout(() => nc.style.display = "none", 500);
                }, 60000);
            });
            connection.on("UpdateCartCount", count => {
                const el = document.getElementById("cart-count");
                if (el) el.textContent = count;
            });
            connection.on("UpdateOrderCount", count => {
                const el = document.getElementById("order-count");
                if (el) el.textContent = count;
            });
            connection.start().catch(err => console.error(err));

            // Announcements via SignalR
            const announcementConnection = new signalR.HubConnectionBuilder()
                .withUrl("/announcementHub")
                .build();
            announcementConnection.on("ReceiveAnnouncement", msg => {
                const nf = document.getElementById("notice-field");
                const sp = document.createElement("span");
                sp.className = "message";
                sp.textContent = msg;
                nf.appendChild(sp);
                nf.parentElement.style.display = "block";
            });
            announcementConnection.start().catch(err => console.error(err));
        });
    </script>
</body>
</html>
